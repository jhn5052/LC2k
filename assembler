#include "assembler.h"


int
main(int argc, char *argv[])
{
	int bRes, bOpcode, bRem;

	char *inFileString, *outFileString;
	FILE *inFilePtr, *outFilePtr;
	char label[MAXLINELENGTH], opcode[MAXLINELENGTH], arg0[MAXLINELENGTH],
		arg1[MAXLINELENGTH], arg2[MAXLINELENGTH];

	if (argc != 3) {
		printf("error: usage: %s <assembly-code-file> <machine-code-file>\n", argv[0]);
		exit(1);
	}

	inFileString = argv[1];
	outFileString = argv[2];

	inFilePtr = fopen(inFileString, "r");
	if (inFilePtr == NULL) {
		printf("error in opening %s\n", inFileString);
		exit(1);
	}

	outFilePtr = fopen(outFileString, "w");
	if (outFilePtr == NULL) {
		printf("Error in opening %s\n", outFileString);
		exit(1);
	}

	//Phase 1
	while (1) {
		if (!readAndParse(inFilePtr, label, opcode, arg0, arg1, arg2)) {
			/* reached end of file */
			break;
		}

		if (strlen(label) > 6) {
			printf("Error : label is too long.\n");
			exit(1);
		}

		if (!strcmp(label, "")) {
			PC++;
			continue;
		}

		if (getLabelAddress(label) != -1) {
			printf("Error : duplicated label.\n ");
			exit(1);
		}
		strcpy(Label_Map[PC++], label);
	}
	MEMEND = PC;

	//Phase 2
	PC = 0;
	rewind(inFilePtr);

	/* here is an example for how to use readAndParse to read a line from
	inFilePtr */
	while (1) {
		bRes = bOpcode = bRem = 0;
		if (!readAndParse(inFilePtr, label, opcode, arg0, arg1, arg2)) {
			break;
		}

		/* after doing a readAndParse, you may want to do the following to test the
		opcode */
		if (!strcmp(opcode, "add")) {
			bOpcode = OP_ADD;
			bRem = encodeRType(arg0, arg1, arg2);
		}

		else if (!strcmp(opcode, "nor")) {
			bOpcode = OP_NOR;
			bRem = encodeRType(arg0, arg1, arg2);
		}

		else if (!strcmp(opcode, "lw")) {
			bOpcode = OP_LW;
			bRem = encodeIType(arg0, arg1, arg2, 0);
		}
		else if (!strcmp(opcode, "sw")) {
			bOpcode = OP_SW;
			bRem = encodeIType(arg0, arg1, arg2, 0);
		}
		else if (!strcmp(opcode, "beq")) {
			bOpcode = OP_BEQ;
			bRem = encodeIType(arg0, arg1, arg2, 1);
		}
		else if (!strcmp(opcode, "jalr")) {
			bOpcode = OP_JALR;
			bRem = encodeJType(arg0, arg1);
		}
		else if (!strcmp(opcode, "halt")) {
			bOpcode = OP_HALT;
		}
		else if (!strcmp(opcode, "noop")) {
			bOpcode = OP_NOOP;
		}
		else if (!strcmp(opcode, ".fill")) {
			bRem = encodeFType(arg0);
		}
		else {
			exit(1);
		}
		bRes = (bOpcode | bRem);
		Memory[PC++] = bRes;
	}

	printMemory(outFilePtr);


	return 0;
}

void
printMemory(FILE *fpr) {
	for (PC = 0; PC < MEMEND; PC++) {
		printf("(address %d): %d (hex 0x%x)\n", PC, Memory[PC], Memory[PC]);
		if (fpr != NULL) {
			fprintf(fpr, "%d\n", Memory[PC]);
		}
	}
}
/*
* Read and parse a line of the assembly-language file.  Fields are returned
* in label, opcode, arg0, arg1, arg2 (these strings must have memory already
* allocated to them).
*
* Return values:
*     0 if reached end of file
*     1 if all went well
*
* exit(1) if line is too long.
*/
int
readAndParse(FILE *inFilePtr, char *label, char *opcode, char *arg0,
	char *arg1, char *arg2)
{
	char line[MAXLINELENGTH];
	char *ptr = line;

	/* delete prior values */
	label[0] = opcode[0] = arg0[0] = arg1[0] = arg2[0] = '\0';

	/* read the line from the assembly-language file */
	if (fgets(line, MAXLINELENGTH, inFilePtr) == NULL) {
		/* reached end of file */
		return(0);
	}

	/* check for line too long (by looking for a \n) */
	if (strchr(line, '\n') == NULL) {
		/* line too long */
		printf("error: line too long\n");
		exit(1);
	}

	/* is there a label? */
	ptr = line;
	if (sscanf(ptr, "%[^\t\n\r ]", label)) {
		/* successfully read label; advance pointer over the label */
		ptr += strlen(label);
	}

	/*
	* Parse the rest of the line.  Would be nice to have real regular
	* expressions, but scanf will suffice.
	*/
	sscanf(ptr, "%*[\t\n\r ]%[^\t\n\r ]%*[\t\n\r ]%[^\t\n\r ]%*[\t\n\r ]%[^\t\n\r ]%*[\t\n\r ]%[^\t\n\r ]",
		opcode, arg0, arg1, arg2);
	return(1);
}

int
isNumber(char *string)
{
	/* return 1 if string is a number */
	int i;
	return((sscanf(string, "%d", &i)) == 1);
}

int
getLabelAddress(char *label) {
	int i;
	for (i = 0; i < MEMEND; i++) {
		if (!strcmp(Label_Map[i], label)) {
			return i;
		}
	}
	return -1;
}

int encodeRType(char *arg0, char *arg1, char *arg2) {
	if (!(isNumber(arg0) && isNumber(arg1) && isNumber(arg2))) {
		printf("Error : some of arguments are not a number. \n");
		exit(1);
	}

	int bRegA = atoi(arg0) << REG_A;
	int bRegB = atoi(arg1) << REG_B;
	int bOffset = atoi(arg2);

	return bRegA | bRegB | bOffset;
}

int encodeIType(char *arg0, char *arg1, char *arg2, int beq) {
	if (!(isNumber(arg0) && isNumber(arg1))) {
		printf("Error : some of arguments are not a number.\n");
		exit(1);
	}

	if (!strcmp(arg2, "")) {
		printf("Error : offset is empty.\n");
		exit(1);
	}

	int bRegA = atoi(arg0) << REG_A;
	int bRegB = atoi(arg1) << REG_B;
	int bOffset;
	if (isNumber(arg2)) {
		bOffset = atoi(arg2);
	}
	else {
		if ((bOffset = getLabelAddress(arg2)) == -1) {
			printf("Error : unknown label.\n");
			printf("%s %s %s\n", arg0, arg1, arg2);
			while (1);
			exit(1);
		}

		if (beq) {
			bOffset -= (PC + 1);
		}
	}
	if (bOffset < -32768 || bOffset > 32767) {
		printf("Error : out of range. \n");
		exit(1);
	}
	if (beq) {
		bOffset &= MASK;
	}

	return bRegA | bRegB | bOffset;
}

int encodeJType(char *arg0, char *arg1) {
	if (!(isNumber(arg0) && isNumber(arg1))) {
		printf("Error : some of arguments are not a number. \n");
		exit(1);
	}
	int bRegA = atoi(arg0) << REG_A;
	int bRegB = atoi(arg1) << REG_B;

	return bRegA | bRegB;
}

int encodeFType(char *arg0) {
	if (!strcmp(arg0, "")) {
		printf("Error : offset is empty.\n");
		exit(1);
	}
	int n;

	if (isNumber(arg0)) {
		n = atoi(arg0);
	}

	else {
		if ((n = getLabelAddress(arg0)) == -1) {
			printf("Error : unknown label.\n");
			exit(1);
		}
	}
	return n;
}
